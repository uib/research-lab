apiVersion: v1
kind: Namespace
metadata:
  name: kube-ingress
  labels:
    name: kube-ingress

---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: default-deny
  namespace: kube-ingress
spec:
  podSelector: {}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress
  namespace: kube-ingress

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nginx-ingress
rules:
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    resources:
    - ingresses/status
    verbs:
    - get
    - list
    - watch
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
    - list
    - watch
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - endpoints
    - secrets
    - configmaps
    - pods
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
    - update

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nginx-ingress
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
    namespace: kube-ingress
roleRef:
  kind: ClusterRole
  name: nginx-ingress
  apiGroup: rbac.authorization.k8s.io

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nginx-ingress
  namespace: kube-ingress
rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    - configmaps
    verbs:
    - get
    - list
    - watch
    - create
    - patch
    - update

---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nginx-ingress
  namespace: kube-ingress
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
roleRef:
  kind: Role
  name: nginx-ingress
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-ingress-controller
  namespace: kube-ingress
data:
  enable-vts-status: "true"
  server-name-hash-bucket-size: "128"
  use-proxy-protocol: "{{ingress_use_proxy_protocol}}"

---

apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: nginx-ingress-controller
  namespace: kube-ingress
  labels:
    app: nginx-ingress-lb
spec:
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: nginx-ingress-lb
    spec:
      serviceAccount: nginx-ingress
      terminationGracePeriodSeconds: 60
      nodeSelector:
        lb: "true"
      containers:
        - image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.7
          name: nginx-ingress-lb
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
          # use downward API
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
            - /nginx-ingress-controller
            - --default-backend-service=kube-system/default-http-backend
            - --configmap=$(POD_NAMESPACE)/nginx-ingress-controller


---

apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-lb
  namespace: kube-ingress
  annotations:
    service.beta.kubernetes.io/external-traffic: OnlyLocal
spec:
  type: NodePort
  selector:
    app: nginx-ingress-lb
  ports:
    - name: http
      protocol: TCP
      port: 80
      nodePort: 80
    - name: https
      protocol: TCP
      port: 443
      nodePort: 443

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nginx-ingress-lb
  namespace: kube-ingress
spec:
 podSelector:
   matchLabels:
     app: nginx-ingress-lb
 ingress:
   - ports:
       - protocol: TCP
         port: 80
       - protocol: TCP
         port: 443

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: default-http-backend
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: default-http-backend
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
        - name: default-http-backend
          # Any image is permissable as long as:
          # 1. It serves a 404 page at /
          # 2. It serves 200 on a /healthz endpoint
          image: gcr.io/google_containers/defaultbackend:1.3
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
          ports:
            - containerPort: 8080
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi

---

apiVersion: v1
kind: Service
metadata:
  name: default-http-backend
  namespace: kube-system
  labels:
    app: default-http-backend
spec:
  type: ClusterIP
  selector:
    app: default-http-backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-http-backend
  namespace: kube-system
spec:
  podSelector:
    matchLabels:
      app: default-http-backend
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: kube-ingress
      ports:
        - protocol: TCP
          port: 8080
